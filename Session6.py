# -*- coding: utf-8 -*-
"""EVA4 - Session 2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZM_MWEzi5bVA309cl1KVQE7Ey_z4THDp
"""

from __future__ import print_function
import torch
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim
from tqdm import tqdm
from torchvision import datasets, transforms
from torch.utils.data import DataLoader
import logging
import datetime

class Net(nn.Module):
    def __init__(self):
        super(Net, self).__init__()
        self.Layer1 = nn.Sequential(
            nn.Conv2d(1, 8, 3, padding=1),
            nn.ReLU(inplace=True),
            nn.BatchNorm2d(8),
            nn.MaxPool2d(2, 2)
           )

        self.Layer2 = nn.Sequential(
            nn.Conv2d(8, 16, 3, padding=1),
            nn.ReLU(inplace=True),
            nn.BatchNorm2d(16),
            nn.MaxPool2d(2, 2)
           )

        self.Layer3 = nn.Sequential(
            nn.Conv2d(16, 32, 3),
            nn.ReLU(inplace=True),
            nn.BatchNorm2d(32),
           )

        self.Layer4 = nn.Sequential(
            nn.Conv2d(32, 32, 3),
            nn.ReLU(inplace=True),
            nn.BatchNorm2d(32),
            #nn.Dropout(0.1)
        )

        self.Layer5 = nn.Sequential(
            nn.Conv2d(32, 32, 1),
            nn.ReLU(inplace=True),
            nn.BatchNorm2d(32),
            nn.Dropout(0.1)
        )

        self.fc = nn.Sequential(
            nn.Linear(32*3*3, 10)
        )

    def forward(self, x):
        x = self.Layer1(x)
        x = self.Layer2(x)
        x = self.Layer3(x)
        x = self.Layer4(x)
        x = self.Layer5(x)
        x = x.view(-1, 32*3*3)
        x= self.fc(x)
        return F.log_softmax(x)

import torch
import torch.nn as nn
import torch.nn.functional as F

class Net(nn.Module):
    def __init__(self):
        super(Net, self).__init__()

        # Layer 1: Conv -> ReLU -> BatchNorm -> MaxPool -> 1x1 Conv
        self.Layer1 = nn.Sequential(
            nn.Conv2d(1, 8, 3, padding=1),       # (1, 28, 28) -> (8, 28, 28)
            nn.ReLU(inplace=True),
            nn.BatchNorm2d(8),
            nn.MaxPool2d(2, 2),                 # (8, 28, 28) -> (8, 14, 14)
            nn.Conv2d(8, 8, 1),
            nn.BatchNorm2d(8),                  # 1x1 Conv -> (8, 14, 14)
            nn.Dropout(0.15)
        )

        # Layer 2: Conv -> ReLU -> BatchNorm -> MaxPool -> 1x1 Conv
        self.Layer2 = nn.Sequential(
            nn.Conv2d(8, 16, 3, padding=1),      # (8, 14, 14) -> (16, 14, 14)
            nn.ReLU(inplace=True),
            nn.BatchNorm2d(16),
            nn.MaxPool2d(2, 2),                 # (16, 14, 14) -> (16, 7, 7)
            nn.Conv2d(16, 16, 1),
            nn.BatchNorm2d(16),                # 1x1 Conv -> (16, 7, 7)
            nn.Dropout(0.15)
        )

        # Layer 3: Conv -> ReLU -> BatchNorm
        self.Layer3 = nn.Sequential(
            nn.Conv2d(16, 32, 3),               # (16, 7, 7) -> (32, 5, 5)
            nn.ReLU(inplace=True),
            nn.BatchNorm2d(32),
            nn.Dropout(0.15)
        )

        # Layer 4: Conv -> ReLU -> BatchNorm
        self.Layer4 = nn.Sequential(
            nn.Conv2d(32, 32, 3),               # (32, 5, 5) -> (32, 3, 3)
            nn.ReLU(inplace=True),
            nn.BatchNorm2d(32),
            nn.Dropout(0.15)
        )

        # Layer 5: 1x1 Conv to reduce channels before FC layer
        self.Layer5 = nn.Sequential(
            nn.Conv2d(32, 32, 1),               # 1x1 Conv -> (16, 3, 3)
            nn.ReLU(inplace=True),
            nn.BatchNorm2d(32),
            nn.Dropout(0.15)
        )

        # Fully connected layer (flatten the feature map)
        self.fc = nn.Sequential(
            nn.Linear(32 * 3 * 3, 10)           # Flatten and output 10 classes
        )

    def forward(self, x):
        x = self.Layer1(x)
        x = self.Layer2(x)
        x = self.Layer3(x)
        x = self.Layer4(x)
        x = self.Layer5(x)
        x = x.view(-1, 32 * 3 * 3)  # Flatten the output of Layer5 (16 channels, 3x3 spatial size)
        x = self.fc(x)
        return F.log_softmax(x, dim=1)

# Check the model parameters
model = Net()
total_params = sum(p.numel() for p in model.parameters())
print(f"Total parameters: {total_params}")

from torchsummary import summary
use_cuda = torch.cuda.is_available()
device = torch.device("cuda" if use_cuda else "cpu")
model = Net().to(device)
summary(model, input_size=(1, 28, 28))

torch.manual_seed(1)
batch_size = 128

kwargs = {'num_workers': 1, 'pin_memory': True} if use_cuda else {}
train_loader = torch.utils.data.DataLoader(
    datasets.MNIST('../data', train=True, download=True,
                    transform=transforms.Compose([
                        transforms.ToTensor(),
                        transforms.Normalize((0.1307,), (0.3081,)),

                        # Reduced rotation angle
                        transforms.RandomRotation((-2, 2), fill=0),
                        # Very minimal translation
                        transforms.RandomAffine(
                            degrees=0,
                            translate=(0.02, 0.02),
                            fill=0
                        ),
                        # Added random erasing with small patches
                        transforms.RandomErasing(
                            p=0.1,
                            scale=(0.01, 0.02),
                            ratio=(0.3, 3.3),
                            value=0
                        )

                    ])),
    batch_size=batch_size, shuffle=True, **kwargs)

test_loader = torch.utils.data.DataLoader(
    datasets.MNIST('../data', train=False, transform=transforms.Compose([
                        transforms.ToTensor(),
                        transforms.Normalize((0.1307,), (0.3081,))
                    ])),
    batch_size=batch_size, shuffle=True, **kwargs)

def train(model, device, train_loader, optimizer, epoch):
    model.train()
    pbar = tqdm(train_loader)
    for batch_idx, (data, target) in enumerate(pbar):
        data, target = data.to(device), target.to(device)
        optimizer.zero_grad()
        output = model(data)
        loss = F.nll_loss(output, target)
        loss.backward()
        optimizer.step()
        pbar.set_description(desc= f'loss={loss.item()} batch_id={batch_idx}')

def test(model, device, test_loader):
    model.eval()
    test_loss = 0
    correct = 0
    with torch.no_grad():
        for data, target in test_loader:
            data, target = data.to(device), target.to(device)
            output = model(data)
            test_loss += F.nll_loss(output, target, reduction='sum').item()  # sum up batch loss
            pred = output.argmax(dim=1, keepdim=True)  # get the index of the max log-probability
            correct += pred.eq(target.view_as(pred)).sum().item()

    test_loss /= len(test_loader.dataset)

    print('\n Epoch {}: Test set: Average loss: {:.4f}, Accuracy: {}/{} ({:.2f}%)\n'.format( epoch,
        test_loss, correct, len(test_loader.dataset),
        100. * correct / len(test_loader.dataset)))

model = Net().to(device)
optimizer = optim.SGD(model.parameters(), lr=0.01, momentum=0.9)

for epoch in range(0, 18):
    train(model, device, train_loader, optimizer, epoch)
    test(model, device, test_loader)